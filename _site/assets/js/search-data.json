{"0": {
    "doc": "About",
    "title": "About",
    "content": "# Acerca de This app was generated as an open-source project from Altermundi in the context of the GSoC 2021 Mentors: * Nicolas Pace * German Ferrero Advisor: * Juan Carrique Student: * TomÃ¡s Assenza ",
    "url": "/LimeApp/docs/About.html",
    "relUrl": "/docs/About.html"
  },"1": {
    "doc": "App size",
    "title": "App size",
    "content": "# App size The idea of the app was to incorporate it into the LibreMesh OS (inside the router), so the app size needed to be light. The final size is approximately 730,3 KB. This was achieved with some tricks: 1. Add scripts to build.gradle ```groovy ```groovy buildTypes { release { minifyEnabled true shrinkResources true proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro' } } ``` 2. Add resConfig for the Spanish language in build.gradle ```groovy resConfigs \"es\" ``` 3. Convert the icon to WebP 4. Delete unused dependencies in the build.gradle 5. Delete these dependencies (added automatically) and all use of them ```groovy implementation 'androidx.appcompat:appcompat:1.2.0' implementation 'com.google.android.material:material:1.2.1' ``` ",
    "url": "/LimeApp/docs/App%20size.html",
    "relUrl": "/docs/App%20size.html"
  },"2": {
    "doc": "Application",
    "title": "Application",
    "content": "# Application ## General description The application is designed in the Java language with the Android graphical elements. The principal function of the app is to choose the interface to send data, but it's also a solution for the users to access the LibreMesh configuration with an installed application. The app works directly with the Lime-App installed on the node executing it in a WebView browser. ## Context The Google Summer of Code is a google program that helps students to participate in open-source projects with organizations. Freifunk is an organization that supports free networks in Germany and has some \"supported organizations\" in their GSoC projects. Altermundi is one of them. ## The project and the problem Altermundi presented to the students an idea of a proposal the idea to make a network capability application for the Android OS. This idea surges from the problem that Android usually chooses the network that provides an internet connection, and with that, the users usually have troubles connecting to the Lime-App. It's common among community networks that the majority of the users only or most commonly uses a mobile phone, also, Android is the most popular operating system in this network. This problem created a lack of communication between network administrators and the ones who had to report errors due to the inability of the users to stay in the configuration without losing internet access (if the user loses internet access, he can't inform the problem). ## The solution An Android Application was made with the possibility to decide what interface to use (WiFi or mobile data), this makes the phone have an \"Application context\" and a \"Device context\". On the application context the WiFi interface enables the user to connect to the Lime-App, and on the other hand, the \"Device Context\" lets the user inform the problems through a messaging system (like Signal, Telegram, or Whatsapp). ",
    "url": "/LimeApp/docs/Application.html",
    "relUrl": "/docs/Application.html"
  },"3": {
    "doc": "Network Access Manager",
    "title": "Network Access Manager",
    "content": "# Network Access Manager The application has a class that manages every message requiring network verifications or selections. ## Requesting WiFi The method that requests the WiFi interface over the mobile one works with this algorithm: ``` 1. Create a NetworkRequest with the WiFi as a transport type. 2. Request a network with the NetworkRequewst generated in the Connectivity Manager. 2.1 In the message add a NetworkCallback with the onAvailable and onLost overridden methods that set the process to the WiFi network ``` On resume, the first step is just as simple as to create the object: ```Java final NetworkRequest networkRequest = new NetworkRequest.Builder() .addTransportType(NetworkCapabilities.TRANSPORT_WIFI) .build(); ``` And the second one can be achived by sending the message with the NetworkCallback overridden: ```Java connectivityManager.requestNetwork(networkRequest, new ConnectivityManager.NetworkCallback() { @Override void onAvailable(Network network) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) connectivityManager.bindProcessToNetwork(network); else ConnectivityManager.setProcessDefaultNetwork(network); } @Override public void onLost(Network network) { if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) connectivityManager.bindProcessToNetwork(null); else ConnectivityManager.setProcessDefaultNetwork(null); } }); ``` ",
    "url": "/LimeApp/docs/Network%20selection.html",
    "relUrl": "/docs/Network%20selection.html"
  },"4": {
    "doc": "Presentations",
    "title": "Presentations",
    "content": "# Videos of the app working (click on the images to access the video) ## Video of version 0.1 (Developed during the first part of the GSoC) [![Version 0.1](https://img.youtube.com/vi/v9LDV2kdCeE/0.jpg)](https://www.youtube.com/watch?v=v9LDV2kdCeE) ## Video of version 1.0 (Developed during the second part of the GSoC) [![Version 1.0](https://img.youtube.com/vi/4wQmdKxRXTs/0.jpg)](https://www.youtube.com/watch?v=4wQmdKxRXTs) ## Video of the presentation in the Lightning talks session about Community Networks: [![Lightning talks](https://img.youtube.com/vi/AWzf1LebdTE/0.jpg)](https://www.youtube.com/watch?v=AWzf1LebdTE) ",
    "url": "/LimeApp/docs/Presentations.html",
    "relUrl": "/docs/Presentations.html"
  },"5": {
    "doc": "LimeApp",
    "title": "LimeApp",
    "content": "# LimeApp ## Description This is a network capability application that helps the LibreMesh user to connect and configure the node. The application is created for Freifunk - Altermundi as a part of the Google Summer of Code 2021 program. ### Why a network capability app Android only sends data to internet through one way, mobile data or WiFi. To help the user connecting to Internet, Android detects if the WiFi provides an internet connection, and automatically changes between Data or WiFi unless the user explicitly asks for a WiFi connection. In the general case, the user doesn't know that there's a possibility to use the WiFi without Internet or doesn't want to because it implies losing Internet Access. With this application, the user can configure the node without disconnecting Mobile Data. ### Status of the app As we're starting the second part of the GSoC, the app isn't finished yet, there's only a preview version that has the principal functions, without a good graphical interface but can execute all the features expected for the first release. ## How to compile it #### How to compile it on Ubuntu 20.04 0. Install git and Android Studio ```bash sudo apt install git sudo apt install openjdk-11-jdk sudo add-apt-repository ppa:maarten-fonville/android-studio sudo apt update sudo apt install android-studio ``` 1. Clone the repo ```bash git clone https://github.com/Patacon13/LibreMesh-app ``` 2. Open it on Android Studio ``` Android Studio -> Open an existing project -> [Folder of cloned project] ``` ## To-Do * A better graphical interface with the integrations of all the planned functions of the app. * Support other services in addition to Lime-App. * Add the app to the LibreMesh operating system, giving the posibility to the user to obtain the app directly from the router. # Google website of the project https://summerofcode.withgoogle.com/projects/5276643104391168 # Posts https://blog.freifunk.net/2021/06/11/android-native-app-for-network-selection-capability-in-libremesh-routers-overview/ https://blog.freifunk.net/2021/07/12/building-an-app-for-network-capability/ ",
    "url": "/LimeApp/docs/",
    "relUrl": "/docs/"
  }
}
